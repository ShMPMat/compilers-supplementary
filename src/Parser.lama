-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun bin (l, op, r) {
  Binop (op, l, r) 
}

-- Primary expression
--var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
--                          lident  @ fun (x) {Var (x)} |
--                          inbr (s ("("), exp, s (")"))),
--    exp = memo $ eta (failure ("expression parsing not implemented\n"));
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr (
        {
          [Left, {[s("!!"), bin], [s("&&"), bin]}],
          [Left, {[s("<"),  bin], [s(">"),  bin], [s("<="), bin], [s(">="), bin], [s("=="), bin], [s("!="), bin]}],
          [Left, {[s("+"),  bin], [s("-"),  bin]}],
          [Left, {[s("*"),  bin], [s("/"),  bin], [s("%"),  bin]}]
        },
        primary
      ));

var stmt = memo $ eta (syntax (
  cur = line s[";"] next = stmt {Seq (cur, next)} |
  r   = line                    { r }
)),
      line = memo $ eta (syntax (
        s["read"]  v = inbr[s("("), lident, s(")")] {Read(v)}    |
        s["write"] e = inbr[s("("), exp, s(")")]    {Write(e)}   |
        v = lident s[":="] x = exp                  {Assn(v, x)} |
        s["skip"]                                   {Skip}                 
      ));
   

-- Public top-level parser
public parse = stmt;
