-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun resolveOperator (o) {
  case o of
    "+"  -> infix +
  | "-"  -> infix -
  | "*"  -> infix *
  | "/"  -> infix /
  | "%"  -> infix %
  | "==" -> infix ==
  | "!=" -> infix !=
  | "<"  -> infix < 
  | "<=" -> infix <=
  | ">"  -> infix > 
  | ">=" -> infix >=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var   (v)       -> st (v)
  | Const (n)       -> n
  | Binop (o, l, r) -> resolveOperator (o) (evalExpr (st, l), evalExpr (st, r))
  esac
}
