-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun resolveOperator (o) {
  case o of
    "+"  -> infix +
  | "-"  -> infix -
  | "*"  -> infix *
  | "/"  -> infix /
  | "%"  -> infix %
  | "==" -> infix ==
  | "!=" -> infix !=
  | "<"  -> infix < 
  | "<=" -> infix <=
  | ">"  -> infix > 
  | ">=" -> infix >=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Var   (v)       -> [c, s (v)]
  | Const (n)       -> [c, n]
  | Binop (o, l, r) ->
      case evalList(c, { l, r }) of
        [c, { lr, rr }] -> [c, evalOp (o, lr, rr)]
      esac
  | Ref (a) -> [c, a]
  | Assn (v, e) -> case evalList (c, { e, v }) of
      [[s, w], { er, vr }] -> [[s <- [vr, er], w], er]
    esac
  | Seq  (l, r) ->
      case evalList (c, { l, r }) of
        [c, { _, rr }] -> [c, rr]
      esac
  | Read (v) -> case readWorld (w) of
      [x, nw] -> [[s <- [v, x], nw], Void]
    esac
  | Write (e) -> case eval (c, e) of
      [[s, w], x] -> [[s, writeWorld (x, w)], Void]
    esac
  | If (e, t, f) ->
      case eval (c, e) of
        [c, 0] -> eval (c, f)
      | [c, _] -> eval (c, t)
      esac
  | While (e, b) ->
      while case eval (c, e) of [nc, v] -> c := nc; v esac do
        c := eval (c, b)[0]
      od;
      [c, Void]
  | DoWhile (b, e) ->
      do
        c := eval (c, b)[0]
      while case eval(c, e) of [nc, v] -> c := nc; v esac od;
      [c, Void]
  | Ignore (e) -> case eval (c, e) of
      [c, _] -> [c, Void]
    esac
  | Skip       -> [c, {}]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
