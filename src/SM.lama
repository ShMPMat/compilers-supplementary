-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[s, st, w], insns) {
  case insns of
    {}  -> c
  | i:it -> eval (case i of
      READ      -> case readWorld (w) of
        [z, nw] -> [z:s, st, nw]
      esac
    | WRITE     -> case s of
        v:t -> [t, st, writeWorld (v, w)]
      esac
    | BINOP (o) -> case s of
        r:l:t -> [resolveOperator (o) (l, r):t, st, w]
      esac 
    | LD    (x) -> [st (x):s, st, w]
    | ST    (x) -> case s of
        y:t -> [t, st <- [x, y], w]
      esac
    | CONST (n) ->  [n:s, st, w]
    esac, it)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (v)       -> {LD (v)}
  | Const (n)       -> {CONST (n)}
  | Binop (o, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (o)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn  (v, e) -> compileExpr (e) +++ {ST (v)} 
    | Seq   (l, r) -> compileSM (l) +++ compileSM (r)
    | Skip         -> {}
    | Read  (v)    -> {READ, ST (v)}
    | Write (e)    -> compileExpr (e) +++ {WRITE}
  esac
}

