-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[s, st, w], insns) {
--fun eval (c@[s, st, w], insns) {
  case insns of
    {}  -> c
  | i:it -> case i of
      CJMP (c, l) ->
        case s of
          v:t -> eval (env, [t, st, w], if v == c then fromLabel (env, l) else it fi)
        esac
    | JMP (l) -> 
        eval (env, c, fromLabel (env, l))
    | i -> eval (env, case i of
        READ      -> case readWorld (w) of
          [z, nw] -> [z:s, st, nw]
        esac
      | WRITE     -> case s of
          v:t -> [t, st, writeWorld (v, w)]
        esac
      | BINOP (o) -> case s of
          r:l:t -> [resolveOperator (o) (l, r):t, st, w]
        esac 
      | LD    (x) -> [st (x):s, st, w]
      | ST    (x) -> case s of
          y:t -> [t, st <- [x, y], w]
        esac
      | CONST (n) ->  [n:s, st, w]
      | LABEL (_) -> c
      esac, it)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (v)       -> singletonBuffer (LD (v))
  | Const (n)       -> singletonBuffer (CONST (n))
  | Binop (o, l, r) -> compileExpr (l) <+> compileExpr (r) <+ BINOP (o)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, t, f) ->
      case env.genLabel of
        [elab, env] -> case env.genLabel of [mlab, env] ->
          case compile (mlab, env, t) of
            [isUsed, env, tcl] ->
              case compile (lab, env, f) of
                [_, env, fcl] ->
                  [
                   true, 
                   env,
                   compileExpr (e) <+ CJMP (0, elab) <+> tcl <+> label (mlab, isUsed) <+ JMP (lab) <+> label (elab, true) <+> fcl
                  ]
              esac
          esac
        esac
      esac
    | While (e, s) ->
      case env.genLabel of
        [slab, env] -> case env.genLabel of [mlab, env] ->
          case compile (mlab, env, s) of
            [isUsed, env, sCode] ->
              [
                true,
                env,
                label (slab, true) <+> compileExpr (e) <+ CJMP (0, lab) <+> sCode <+> label (mlab, isUsed) <+ JMP (slab)
              ]
	   esac
        esac
      esac
    | DoWhile (s, e) ->
      case env.genLabel of
        [slab, env] -> case env.genLabel of [mlab, env] ->
          case compile (mlab, env, s) of
            [isUsed, env, sCode] ->
              [
              true,
              env,
              label (slab, true) <+> sCode <+> label (mlab, isUsed) <+> compileExpr (e) <+ CJMP (0, lab) <+ JMP (slab)
            ]
          esac
        esac
      esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
--    case stmt of
--      Assn  (v, e) -> compileExpr (e) +++ {ST (v)} 
--    | Seq   (l, r) -> compileSM (l) +++ compileSM (r)
--    | Skip         -> {}
--    | Read  (v)    -> {READ, ST (v)}
--    | Write (e)    -> compileExpr (e) +++ {WRITE}
--    esac

